{"version":3,"file":"static/js/614.44a12bb9.chunk.js","mappings":"sQAOMA,EAAeC,EAAAA,KAAaC,MAAM,CACtCC,KAAMF,EAAAA,KAAaG,SAAS,sBAC5BC,MAAOJ,EAAAA,KAAaK,WAAWD,QAAQD,SAAS,eAChDG,SAAUN,EAAAA,KACPO,IAAI,GACJC,IACC,IAEDL,SAAS,oBAGDM,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAAC,KAAD,CACEC,cAAe,CACbV,KAAM,GACNE,MAAO,GACPE,SAAU,IAEZO,iBAAkBd,EAClBe,SAAU,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBC,QAAQC,IAAIH,GACZL,GAASS,EAAAA,EAAAA,IAASJ,IAElBC,GACD,EAZH,UAcE,UAAC,KAAD,YACE,SAACI,EAAA,EAAD,CAAKC,QAAS,EAAGC,GAAI,CAAEC,MAAO,KAA9B,UACE,SAAC,KAAD,CACEC,UAAWC,EAAAA,EACXC,MAAM,WACNC,MAAM,YACNC,KAAK,QACLC,KAAK,OACL3B,KAAK,OACL4B,WAAS,OAGb,SAACV,EAAA,EAAD,CAAKC,QAAS,EAAd,UACE,SAAC,KAAD,CACEG,UAAWC,EAAAA,EACXC,MAAM,QACNE,KAAK,QACLD,MAAM,YACNzB,KAAK,QACL2B,KAAK,OACLC,WAAS,OAIb,SAACV,EAAA,EAAD,CAAKC,QAAS,EAAd,UACE,SAAC,KAAD,CACEG,UAAWC,EAAAA,EACXC,MAAM,WACNE,KAAK,QACLD,MAAM,YACNE,KAAK,WACL3B,KAAK,WACL4B,WAAS,OAGb,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYL,MAAM,YAAYE,KAAK,SAASC,WAAS,EAArE,0BAMP,ECnED,EARiB,WACf,OACE,4BACE,6CACA,SAACrB,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","components/pages/Register.jsx"],"sourcesContent":["import * as Yup from 'yup';\nimport { Field, Form, Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/auth-operations';\nimport { TextField } from 'formik-mui';\nimport { Box, Button } from '@mui/material';\n\nconst FormikSchema = Yup.object().shape({\n  name: Yup.string().required('Enter contact name'),\n  email: Yup.string().nullable().email().required('Enter email'),\n  password: Yup.string()\n    .min(2 | 'Password must be at least 8 characters long')\n    .max(\n      16 | 'The maximum length of the password must not exceed 16 characters'\n    )\n    .required('Enter password'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        email: '',\n        password: '',\n      }}\n      validationSchema={FormikSchema}\n      onSubmit={(values, { resetForm }) => {\n        console.log(values);\n        dispatch(register(values));\n\n        resetForm();\n      }}\n    >\n      <Form>\n        <Box marginY={1} sx={{ width: 280 }}>\n          <Field\n            component={TextField}\n            label=\"Username\"\n            color=\"secondary\"\n            size=\"small\"\n            type=\"text\"\n            name=\"name\"\n            fullWidth\n          />\n        </Box>\n        <Box marginY={1}>\n          <Field\n            component={TextField}\n            label=\"Email\"\n            size=\"small\"\n            color=\"secondary\"\n            name=\"email\"\n            type=\"text\"\n            fullWidth\n          />\n        </Box>\n\n        <Box marginY={1}>\n          <Field\n            component={TextField}\n            label=\"Password\"\n            size=\"small\"\n            color=\"secondary\"\n            type=\"password\"\n            name=\"password\"\n            fullWidth\n          />\n        </Box>\n        <Button variant=\"contained\" color=\"secondary\" type=\"submit\" fullWidth>\n          Register\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n};\nexport default Register;\n"],"names":["FormikSchema","Yup","shape","name","required","email","nullable","password","min","max","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","console","log","register","Box","marginY","sx","width","component","TextField","label","color","size","type","fullWidth","Button","variant"],"sourceRoot":""}